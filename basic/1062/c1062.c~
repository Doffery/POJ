#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
using namespace std;

struct Edge {
	int index;
	int money;
	Edge() {}
	Edge(int x, int y) {
		index = x; money = y;
	}
};

struct TNode{
	int money;
	int level;
	std::vector<Edge> edges;
}nodes[110];

int m, n;
int minMoney;
int minLevel, maxLevel;
void dfs(int p, int money) {
	int i, s = nodes[p].edges.size();
	for(i = 0; i < s; ++i) {
		Edge e = nodes[p].edges[i];
		if(nodes[e.index].level > minLevel + m 
				|| nodes[e.index].level < maxLevel - m)
			continue;
		int tminl = minLevel, tmaxl = maxLevel;
		if(nodes[e.index].level < minLevel)
			minLevel = nodes[e.index].level;
		else if(nodes[e.index].level > maxLevel)
			maxLevel = nodes[e.index].level;
		if(e.index == 1) {
			if(money + e.money < minMoney)
				minMoney = e.money + money;
		} else dfs(e.index, money + e.money);
		minLevel = tminl; maxLevel = tmaxl;
	}
}

int main() {
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	int i, j;
	int en;
	int tindex, tmoney;
	scanf("%d %d", &m, &n);
	for(i = 1; i <= n; ++i) {
		scanf("%d %d %d", &nodes[i].money, &nodes[i].level, &en);
		nodes[0].edges.push_back(Edge(i, nodes[i].money));
		for(j = 0; j < en; ++j) {
			scanf("%d %d", &tindex, &tmoney);
			//nodes[i].edges.push_back(Edge(tindex, tmoney));
			nodes[tindex].edges.push_back(Edge(i, tmoney));
		}
	}
	minLevel = nodes[1].level;
	minMoney = nodes[1].money;
	dfs(0, 0);
	printf("%d\n", minMoney);

	return 0;
}



