//think about use the binary search to get the answer
#include<cstdio>
#include<algorithm>
#include<queue>
#include<vector>

using std::priority_queue;

struct Position {
	int x, y;
	Position() {}
	Position(int xi, int yi) {
		x = xi; y = yi;
	}
};

bool cmpx(Position a, Position b) {
	return a.x < b.x;
}

bool cmpy(Position a, Position b) {
	return a.y < b.y;
}

Position data[10010];

priority_queue<int> heap_max;//low part
priority_queue<int, std::vector<int>, std::greater<int> > heap_min;//high part
int FindMedian() {
}

int main() {
	freopen("in.txt", "r", stdin);

	int n;
	scanf("%d", &n);
	int i, j;
	int sumx = 0;
	for(i = 0; i < n; ++i) {
		scanf("%d %d", &data[i].x, &data[i].y);
		sumx += data[i].x;
	}
	std::sort(data, data+n, cmpx);

	int moves = 0;
	int s = data[n/2].x - n/2;
	for(i = 0; i < n; ++i) {
		moves += std::abs(data[i].x - s);
		++s;
	}

	std::sort(data, data+n, cmpy);
	int mid = data[n/2].y;
	for(i = 0; i < n; ++i) {
		moves += std::abs(data[i].y - mid);
	}
	
	printf("%d\n", moves);

}
